// Do NOT change. Changes will be lost next time file is generated

#define R__DICTIONARY_FILENAME srcdIexternaldIjana_0dO7dO7p1dIsrcdIJANAdIJObject_Dict

/*******************************************************************/
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#define G__DICTIONARY
#include "RConfig.h"
#include "TClass.h"
#include "TDictAttributeMap.h"
#include "TInterpreter.h"
#include "TROOT.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"
#include <algorithm>
#include "TCollectionProxyInfo.h"
/*******************************************************************/

#include "TDataMember.h"

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

// Header files passed as explicit arguments
#include "src/external/jana_0.7.7p1/src/JANA/JObject.h"

// Header files passed via #pragma extra_include

namespace ROOT {
   static void *new_janacLcLJObject(void *p = 0);
   static void *newArray_janacLcLJObject(Long_t size, void *p);
   static void delete_janacLcLJObject(void *p);
   static void deleteArray_janacLcLJObject(void *p);
   static void destruct_janacLcLJObject(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::jana::JObject*)
   {
      ::jana::JObject *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::jana::JObject >(0);
      static ::ROOT::TGenericClassInfo 
         instance("jana::JObject", ::jana::JObject::Class_Version(), "JObject.h", 58,
                  typeid(::jana::JObject), ::ROOT::Internal::DefineBehavior(ptr, ptr),
                  &::jana::JObject::Dictionary, isa_proxy, 4,
                  sizeof(::jana::JObject) );
      instance.SetNew(&new_janacLcLJObject);
      instance.SetNewArray(&newArray_janacLcLJObject);
      instance.SetDelete(&delete_janacLcLJObject);
      instance.SetDeleteArray(&deleteArray_janacLcLJObject);
      instance.SetDestructor(&destruct_janacLcLJObject);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::jana::JObject*)
   {
      return GenerateInitInstanceLocal((::jana::JObject*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_DICT_(Init) = GenerateInitInstanceLocal((const ::jana::JObject*)0x0); R__UseDummy(_R__UNIQUE_DICT_(Init));
} // end of namespace ROOT

namespace jana {
//______________________________________________________________________________
atomic_TClass_ptr JObject::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *JObject::Class_Name()
{
   return "jana::JObject";
}

//______________________________________________________________________________
const char *JObject::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::jana::JObject*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int JObject::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::jana::JObject*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
TClass *JObject::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::jana::JObject*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *JObject::Class()
{
   if (!fgIsA.load()) { R__LOCKGUARD(gInterpreterMutex); fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::jana::JObject*)0x0)->GetClass(); }
   return fgIsA;
}

} // namespace jana
namespace jana {
//______________________________________________________________________________
void JObject::Streamer(TBuffer &R__b)
{
   // Stream an object of class jana::JObject.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(jana::JObject::Class(),this);
   } else {
      R__b.WriteClassBuffer(jana::JObject::Class(),this);
   }
}

} // namespace jana
